version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: identity-postgres
    environment:
      POSTGRES_DB: identity_db
      POSTGRES_USER: identity_user
      POSTGRES_PASSWORD: identity_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - identity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U identity_user -d identity_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: identity-redis
    command: redis-server --appendonly yes --requirepass redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - identity-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: identity-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - identity-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: identity-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - identity-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI (Optional - for debugging)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: identity-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - identity-network

  # Identity Service (uncomment to run the service in Docker)
  # identity-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: identity-service
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: production
  #     DATABASE_URL: jdbc:postgresql://postgres:5432/identity_db
  #     DATABASE_USER: identity_user
  #     DATABASE_PASSWORD: identity_pass
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     REDIS_PASSWORD: redis_pass
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9093
  #     AUTH0_DOMAIN: ${AUTH0_DOMAIN:-dev.auth0.com}
  #     AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:-dev-client}
  #     AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET:-dev-secret}
  #     AUTH0_AUDIENCE: ${AUTH0_AUDIENCE:-https://dev-api}
  #   networks:
  #     - identity-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  identity-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: